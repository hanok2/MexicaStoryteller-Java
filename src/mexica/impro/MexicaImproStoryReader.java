package mexica.impro;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import mexica.CharacterName;
import mexica.MexicaRepository;
import mexica.core.Action;
import mexica.core.CompositeAction;
import mexica.core.Position;
import mexica.story.ActionInstantiated;
import mexica.story.DeadAvatarException;
import mexica.story.InsertionMode;
import mexica.story.Story;
import mexica.story.filter.StoryFilterException;
import mexica.story.log.StoryLog;
import mexica.tools.InvalidCharacterException;
import mexica.tools.StoryFlowException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * Class to read a colaborative story from an XML file.
 * @author Ivan Guerrero
 */
public class MexicaImproStoryReader implements IMexicaImproXMLTags, MexicaImproXMLLogTags {
    private Document doc;
    
    public Story readXML(String path) {
        File file = new File(path);
        return readXML(file);
    }
    
    /**
     * Reads an XML file generated by Slant containing constraints for a Mexica story
     */
    public Story readXML(File file) {
        Story story = new Story();
        try {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            doc = dBuilder.parse(file);
            //Obtains the story element
            Element storyNode = (Element)doc.getElementsByTagName(MEXICA_STORY).item(0);
            story = createStory(storyNode);
            
            //Analyze the current story
            MexicaImproStoryAnalyzer analyzer = new MexicaImproStoryAnalyzer();
            analyzer.analyzeStory(story, doc);
        } catch (SAXException | IOException | ParserConfigurationException | NullPointerException ex) {
            Logger.getGlobal().log(Level.SEVERE, "Error reading XML file {0}", ex.getMessage());
            throw new Error("Error reading XML file " + ex.getMessage());
        } 
        
        return story;
    }

    /**
     * Creates a story based on the information found in the given node
     * @param storyNode The root node of a story in the XML file. Corresponds to the <MexicaStory> node
     * @return A story
     */
    private Story createStory(Element storyNode) {
        Story story = new Story();
        
        //Reads the default location, iterations and impasses of the story
        String defaultLocation = storyNode.getAttribute(DEFAULT_LOCATION);
        story.setDefaultPosition(Position.valueOf(defaultLocation));
        story.setIteration(storyNode.getAttribute(ITERATION_NUMBER));
        story.setImpasses(storyNode.getAttribute(IMPASSES));
        //Reads if the story has already been finished or not
        String finishedBy = storyNode.getAttribute(FINISHED_BY);
        if (!finishedBy.isEmpty())
            story.setFinished(true, finishedBy);
        
        //Obtains the action list element
        Element actionsNode = (Element)storyNode.getElementsByTagName(MEXICA_ACTIONS).item(0);
        //Reads the actions in the story
        readActions(actionsNode, story);
        
        return story;
    }
    
    public Document getDocument() {
        return doc;
    }

    private Action createCompositeAction(String compositeActionID, Story story) {
        int id = Integer.parseInt(compositeActionID);
        ActionInstantiated instance = story.getActions().get(id-1); //Since the actionID begins with 1
        Action realised = new Action();
        realised.setActionName("Realised");
        realised.setNoCharacters(1);
        CompositeAction composite = new CompositeAction(realised, instance, story.getAvatarFactory());
        
        return composite;
    }

    /**
     * Reads the actions in the story and adds them to the story object
     * @param actionsNode
     * @param story
     */
    private void readActions(Element actionsNode, Story story) {
        NodeList actions = actionsNode.getElementsByTagName(MEXICA_ACTION);
        for (int i=0; i<actions.getLength(); i++) {
            CharacterName performer, receiver;
            //Reads the action elements
            Element actionElem = (Element)actions.item(i);
            String actionID = actionElem.getAttribute(ACTION_ID);
            String name = actionElem.getAttribute(ACTION_NAME);
            String perf = actionElem.getAttribute(ACTION_PERFORMER);
            String rec = actionElem.getAttribute(ACTION_RECEIVER);
            String compositeActionID = actionElem.getAttribute(COMPOSITE_ACTION);
            String mexicaImproID = actionElem.getAttribute(MEXICA_INSTANCE_ID);
            String insertionMode = actionElem.getAttribute(INSERTION_MODE);
            String iterationNumber = actionElem.getAttribute(ITERATION_NUMBER);
            String actionOrder = actionElem.getAttribute(ACTION_NUMBER);
            
            try {
                //Obtains the Mexica mappings for the read elements
                Action action = MexicaRepository.getInstance().getActions().getAction(name);
                if (name.equalsIgnoreCase("realised"))
                    action = createCompositeAction(compositeActionID, story);
                if (action == null) {
                    action = new Action();
                    action.setActionName(name);
                    action.setNewAction(true);
                    action.setNoCharacters((rec != null && !rec.isEmpty()) ? 2 : 1);
                }
                performer = CharacterName.valueOf(perf);
            
                ActionInstantiated instance;
                if (rec != null && !rec.isEmpty()) {
                    receiver = CharacterName.valueOf(rec);
                    instance = story.addAction(action, performer, receiver);
                }
                else
                    instance = story.addAction(action, performer);
                instance.setCollaborativeAction(true);
                instance.setMexicaImproID(Integer.parseInt(mexicaImproID));
                instance.setIterationNumber(Integer.parseInt(iterationNumber));
                instance.setActionID(Integer.parseInt(actionOrder));
                instance.setInsertionMode(InsertionMode.getInsertionMode(insertionMode));
                StoryLog.addMessage(story, "Action " + instance + " added");
            } catch (InvalidCharacterException | DeadAvatarException ex) {
                Logger.getGlobal().log(Level.SEVERE, "Error parsing action {0}, {1}", 
                                                     new Object[] {actionID, ex.getMessage()});
            } catch (StoryFlowException sfe) {
                story.addIrrelevantAction(story.getIterations());
            } catch (StoryFilterException sfex) {
                story.addIllogicalAction(story.getIterations());
            } catch (IndexOutOfBoundsException iobe) {
                StoryLog.addMessage(story, "Invalid composite action " + actionID + " " + name);
            }
        }
    }
}