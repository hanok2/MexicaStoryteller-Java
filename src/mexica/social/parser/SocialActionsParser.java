/* Generated By:JavaCC: Do not edit this line. SocialActionsParser.java */
package mexica.social.parser;

import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import mexica.MexicaParameters;
import mexica.core.*;
import mexica.social.*;
import slant.MexicaFileConfiguration;

public class SocialActionsParser implements SocialActionsParserConstants {
    private List<SocialAction> socialActions;
    private SocialAction action;

    public SocialActionsParser(String path) throws IOException {
        this(new FileInputStream(path));
        socialActions = new ArrayList<SocialAction>();
    }

    public List<SocialAction> getSocialActions() {
        return socialActions;
    }

    public static void main(String[] args) throws ParseException, TokenMgrError, IOException {
        try {
            MexicaFileConfiguration config = new MexicaFileConfiguration();
            config.loadConfiguration();
        } catch (IOException ex) {
            Logger.getGlobal().log(Level.SEVERE, null, ex);
        }
        SocialActionsParser parser = new SocialActionsParser(MexicaParameters.SOCIAL_ACTIONS_FILE);
        parser.start();
    }

    public void createAction(String name, int noCharacters) {
        if (action != null)
            socialActions.add(action);
        action = new SocialAction();
        action.setActionName(name);
        action.setNoCharacters(noCharacters);
    }

    public void setPoscondition(String performer, String receiver, String intensity, String emotionType) {
        Poscondition pos = new Poscondition();
        pos.setCharacterA(performer);
        pos.setCharacterB(receiver);
        pos.setConditionType(ConditionType.Emotion);
        pos.setIntensity(Integer.parseInt(intensity));
        pos.setEmotionType(emotionType);
        action.addPoscondition(pos);
    }

    public void setPoscondition(String performer, String receiver, String tensionType) {
        Tension ten = new Tension();
        ten.setCharacterA(performer);
        ten.setCharacterB(receiver);
        ten.setConditionType(ConditionType.Tension);
        ten.setTensionType(tensionType);
        action.addTension(ten);
    }

    public void setSocialData(String character, String relation) {
        action.setSocialCharacter(character);
        action.setSocialRelation(relation);
    }

    public void addText(String text) {
        action.addText(text);
    }

  final public void start() throws ParseException {
 Token mode = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOCIAL_ACTION:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(SOCIAL_ACTION);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(SPACE);
      }
      jj_consume_token(NEW_LINE);
      parseSocialAction();
      jj_consume_token(NEW_LINE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSCONDITION:
        jj_consume_token(POSCONDITION);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_3;
          }
          jj_consume_token(SPACE);
        }
        jj_consume_token(NEW_LINE);
        mode = jj_consume_token(SOCIAL_MODE);
        label_4:
        while (true) {
          jj_consume_token(SPACE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EMOTION:
          parseEmotion();
          break;
        case TENSION:
          parseTension();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(NEW_LINE);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
            action.setSocialPosconditionMode(mode.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOCIAL_DATA:
        jj_consume_token(SOCIAL_DATA);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_5;
          }
          jj_consume_token(SPACE);
        }
        jj_consume_token(NEW_LINE);
        parseSocialData();
        jj_consume_token(NEW_LINE);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(TEXT);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_6;
        }
        jj_consume_token(SPACE);
      }
      jj_consume_token(NEW_LINE);
      parseTexts();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW_LINE:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_7;
        }
        jj_consume_token(NEW_LINE);
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END_OF_FILE:
      jj_consume_token(END_OF_FILE);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        createAction(null, 0);
  }

  final public void parseSocialAction() throws ParseException {
 Token name = null, characters = null;
    name = jj_consume_token(WORD);
    label_8:
    while (true) {
      jj_consume_token(SPACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_8;
      }
    }
    characters = jj_consume_token(NUMBER);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_9;
      }
      jj_consume_token(SPACE);
    }
        createAction(name.image, Integer.parseInt(characters.image));
  }

  final public void parseEmotion() throws ParseException {
 Token perf = null, rec = null, intensity = null, emotionType = null;
    jj_consume_token(EMOTION);
    label_10:
    while (true) {
      jj_consume_token(SPACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_10;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      perf = jj_consume_token(WORD);
      break;
    case STAR:
      perf = jj_consume_token(STAR);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_11:
    while (true) {
      jj_consume_token(SPACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_11;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      rec = jj_consume_token(WORD);
      break;
    case STAR:
      rec = jj_consume_token(STAR);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_12:
    while (true) {
      jj_consume_token(SPACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_12;
      }
    }
    intensity = jj_consume_token(NUMBER);
    label_13:
    while (true) {
      jj_consume_token(SPACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_13;
      }
    }
    emotionType = jj_consume_token(NUMBER);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_14;
      }
      jj_consume_token(SPACE);
    }
        setPoscondition(perf.image, rec.image, intensity.image, emotionType.image);
  }

  final public void parseTension() throws ParseException {
 Token perf = null, rec = null, tensionType = null;
    jj_consume_token(TENSION);
    label_15:
    while (true) {
      jj_consume_token(SPACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_15;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      perf = jj_consume_token(WORD);
      break;
    case STAR:
      perf = jj_consume_token(STAR);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_16:
    while (true) {
      jj_consume_token(SPACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_16;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      rec = jj_consume_token(WORD);
      break;
    case STAR:
      rec = jj_consume_token(STAR);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_17:
    while (true) {
      jj_consume_token(SPACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_17;
      }
    }
    tensionType = jj_consume_token(TENSION_TYPE);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_18;
      }
      jj_consume_token(SPACE);
    }
        setPoscondition(perf.image, rec.image, tensionType.image);
  }

  final public void parseSocialData() throws ParseException {
 Token socialCharacter = null, socialRelation = null;
    jj_consume_token(SOCIAL_CHARACTER);
    label_19:
    while (true) {
      jj_consume_token(SPACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_19;
      }
    }
    socialCharacter = jj_consume_token(SOCIAL_CHARACTER_OPT);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_20;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(NEW_LINE);
    jj_consume_token(SOCIAL_RELATION);
    label_21:
    while (true) {
      jj_consume_token(SPACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_21;
      }
    }
    socialRelation = jj_consume_token(SOCIAL_RELATION_OPT);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_22;
      }
      jj_consume_token(SPACE);
    }
        setSocialData(socialCharacter.image, socialRelation.image);
  }

  final public void parseTexts() throws ParseException {
    Token text = null, text2 = null;
    int count = 0;
    String phrase = "";
    label_23:
    while (true) {
      text = jj_consume_token(WORD);
                       phrase = text.image;
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_24;
        }
        label_25:
        while (true) {
          jj_consume_token(SPACE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_25;
          }
        }
        text2 = jj_consume_token(WORD);
              phrase += " " + text2.image;
      }
      jj_consume_token(NEW_LINE);
            addText(phrase);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WORD:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_23;
      }
    }
  }

  /** Generated Token Manager. */
  public SocialActionsParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10,0x4,0x4,0x4,0xc0,0x20,0x4,0x200,0x4,0x8,0x4001,0x4,0x4,0x4,0x60000,0x4,0x60000,0x4,0x4,0x4,0x4,0x60000,0x4,0x60000,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x40000,};
   }

  /** Constructor with InputStream. */
  public SocialActionsParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SocialActionsParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SocialActionsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SocialActionsParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SocialActionsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SocialActionsParser(SocialActionsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SocialActionsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
