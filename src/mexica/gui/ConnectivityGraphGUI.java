package mexica.gui;

import edu.uci.ics.jung.algorithms.layout.*;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.visualization.*;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse;
import edu.uci.ics.jung.visualization.renderers.Renderer;
import java.awt.*;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.*;
import javax.imageio.ImageIO;
import mexica.MexicaRepository;
import mexica.engagement.*;
import org.apache.commons.collections15.Transformer;

/**
 *
 * @author ivang_000
 */
public class ConnectivityGraphGUI extends javax.swing.JFrame {
    private VisualizationViewer<Atom, String> vv;
    private Graph<Atom, String> graph;
    private int dx = 800, dy = 500;
    private Transformer<Atom, String> vertexLabelTrans;
    private Transformer<Atom, Paint> vertexFillTrans;
    private Transformer<Atom, Shape> vertexShapeTrans;
    
    /**
     * Creates new form ConnectivityGraphGUI
     */
    public ConnectivityGraphGUI() {
        initComponents();

        graph = MexicaRepository.getInstance().getConnectivityGraph().getConnectivityGraph();
        Layout<Atom, String> layout = new SpringLayout<>(graph);
        layout.setSize(new Dimension(dx, dy));
        vv = new VisualizationViewer<>(layout);
        vv.setPreferredSize(new Dimension(dx, dy));
        vertexLabelTrans = new Transformer<Atom, String>() {
             @Override
             public String transform(Atom a) {
                 //return a.toString().replace("Atom", "") + "[" + graph.getNeighborCount(a) + "]";
                 return a.toString().replace("Atom", "") + "[" + a.getNextActions().size() + "]";
                 //return a.toString().replace("Atom", "") + "[" + a.getClusterID() + "]";
             }            
         };
        vv.getRenderContext().setVertexLabelTransformer(vertexLabelTrans);
        vertexFillTrans = new Transformer<Atom, Paint>() {
            @Override
            public Paint transform(Atom a) {
                Atom.ConnectivityClass connClass = a.getNeighborClass();
                switch (connClass) {
                    case ISOLATED: return Color.BLUE;
                    case REGULAR: return Color.YELLOW;
                    case FOCAL: return Color.RED;
                    default: return Color.BLACK;
                }
            }
        };
        vv.getRenderContext().setVertexFillPaintTransformer(vertexFillTrans);
        vertexShapeTrans = new Transformer<Atom, Shape>() {
            @Override
            public Shape transform(Atom a) {
                //int count = graph.getNeighborCount(a) * 3;
                int count = a.getNextActions().size() * 5;
                Ellipse2D circle = new Ellipse2D.Double(-count/2, -count/2, count, count);
                return circle;
            }
        };
        vv.getRenderContext().setVertexShapeTransformer(vertexShapeTrans);
        DefaultModalGraphMouse gm = new DefaultModalGraphMouse();
        gm.setMode(ModalGraphMouse.Mode.PICKING);
        vv.setGraphMouse(gm);
        
        pGraph.setLayout(new GridLayout(1,1));
        pGraph.add(vv);
        
        String desc = "Each vertex represents an atom.\n";
        desc += "Each edge represents a link between two similar atoms according to their contexts.\n";
        desc += "The size of the vertex represents the number of following actions available in it.\n";
        desc += "The label of each vertex contains: [emotions-tensions-atom number].";
        txtDescription.setText(desc);
        
        for (Cluster cluster : MexicaRepository.getInstance().getConnectivityGraph().getClusters()) {
            txtClusters.append(cluster.getDescription());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pGraph = new javax.swing.JPanel();
        bttnSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtClusters = new javax.swing.JTextArea();
        bttnReport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Connectivity Graph");

        javax.swing.GroupLayout pGraphLayout = new javax.swing.GroupLayout(pGraph);
        pGraph.setLayout(pGraphLayout);
        pGraphLayout.setHorizontalGroup(
            pGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        pGraphLayout.setVerticalGroup(
            pGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        bttnSave.setText("Save");
        bttnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnSaveActionPerformed(evt);
            }
        });

        txtDescription.setColumns(20);
        txtDescription.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        txtDescription.setLineWrap(true);
        txtDescription.setRows(5);
        txtDescription.setEnabled(false);
        jScrollPane1.setViewportView(txtDescription);

        txtClusters.setColumns(20);
        txtClusters.setRows(5);
        jScrollPane2.setViewportView(txtClusters);

        bttnReport.setText("Report");
        bttnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bttnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bttnReport))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bttnSave)
                            .addComponent(bttnReport)))
                    .addComponent(pGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bttnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnSaveActionPerformed
        saveToFile();
    }//GEN-LAST:event_bttnSaveActionPerformed

    private void bttnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnReportActionPerformed
        txtClusters.setText("Clusters and atoms\n");
        for (Cluster cluster : MexicaRepository.getInstance().getConnectivityGraph().getClusters()) {
            txtClusters.append(cluster.toString());
            for (Atom atom : cluster.getAtomList()) {
                txtClusters.append("\n\t" + atom);
            }
            txtClusters.append("\n");
        }
    }//GEN-LAST:event_bttnReportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConnectivityGraphGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MexicaRepository.getInstance().loadData();
                new ConnectivityGraphGUI().setVisible(true);
            }
        });
    }
    
    private void saveToFile() {
        // Create the VisualizationImageServer
        // vv is the VisualizationViewer containing my graph
        VisualizationImageServer<Atom, String> vis = new VisualizationImageServer<>(vv.getGraphLayout(), vv.getGraphLayout().getSize());

        // Configure the VisualizationImageServer the same way
        // you did your VisualizationViewer. In my case e.g.
        vis.setBackground(Color.WHITE);
        vis.getRenderContext().setVertexLabelTransformer(vertexLabelTrans);
        vis.getRenderContext().setVertexFillPaintTransformer(vertexFillTrans);
        vis.getRenderContext().setVertexShapeTransformer(vertexShapeTrans);
        vis.getRenderer().getVertexLabelRenderer().setPosition(Renderer.VertexLabel.Position.CNTR);

        // Create the buffered image
        BufferedImage image = (BufferedImage) vis.getImage(
        new Point2D.Double(vv.getGraphLayout().getSize().getWidth() / 2,
        vv.getGraphLayout().getSize().getHeight() / 2),
        new Dimension(vv.getGraphLayout().getSize()));

        // Write image to a png file
        File outputfile = new File("graph.png");

        try {
        ImageIO.write(image, "png", outputfile);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bttnReport;
    private javax.swing.JButton bttnSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel pGraph;
    private javax.swing.JTextArea txtClusters;
    private javax.swing.JTextArea txtDescription;
    // End of variables declaration//GEN-END:variables
}
