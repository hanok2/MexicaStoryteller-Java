/*
 * ActionChooser.java
 *
 * Created on 4/07/2011, 02:17:41 PM
 */
package mexica.gui;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import mexica.*;
import mexica.CharacterName;
import mexica.core.*;
import mexica.story.*;
import mexica.tools.InvalidCharacterException;
import mexica.tools.StoryFlowException;

/**
 *
 * @author Ivan Guerrero (UNAM, Mexico)
 */
public class MexicaActionInstantiator extends javax.swing.JDialog implements Observer {
    private ActionStore actions;
    private ActionInstantiated previousAction;
    private ConditionInstantiated missingCondition;
    private List<Action> list;
    private Random random;
    private Story story;
    private Set<CharacterName> availableCharacters;
    
    /** Creates new form ActionChooser */
    public MexicaActionInstantiator(java.awt.Frame parent, boolean modal, Story story) {
        this(parent, modal, null, null, story);
    }
    
    public MexicaActionInstantiator(java.awt.Frame parent, boolean modal, ActionInstantiated action, ConditionInstantiated condition, Story story) {
        super(parent, modal);
        this.story = story;
        initComponents();
        actions = MexicaRepository.getInstance().getActions();
        availableCharacters = new HashSet<>();
        for (CharacterName cn : story.getAvatarFactory().getAvailableCharacterNames()) {
            availableCharacters.add(cn);
        }
        if (condition != null) {
            if (CharacterName.isSelectableCharacter(condition.getCharacterA()))
                availableCharacters.add(condition.getCharacterA());
            if (CharacterName.isSelectableCharacter(condition.getCharacterB()))
                availableCharacters.add(condition.getCharacterB());
        }
        
        loadCharacterModel();
        setPreviousAction(action);
        setMissingCondition(condition);
        loadActionModel();
        random = new Random();
        getContentPane().setBackground(getBackground());
    }
    
    private void loadActionModel() {
        List<Action> newList = (missingCondition != null) ? 
                actions.getActionList(missingCondition.getCondition()) : actions.getActionList();
        
        list = new ArrayList<>();
        for (Action action : newList) {
            if (story.getGuidelines().satisfiesGuidelines(action))
                list.add(action);
        }
        
        listActions.setModel(new javax.swing.AbstractListModel() {
            
            @Override
            public int getSize() {
               return list.size();
            }

            @Override
            public Object getElementAt(int index) {
                return list.get(index);
                
            }
        });
    }
    
    private void loadCharacterModel() {
        Logger.getGlobal().log(Level.INFO, "Loading character model for action instantiation");
        listCharacterA.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                return availableCharacters.size();
                //return story.getAvatarFactory().getAvailableCharacterNames().size();
            }

            @Override
            public Object getElementAt(int index) {
                return availableCharacters.toArray()[index];
                //return story.getAvatarFactory().getAvailableCharacterNames().get(index);
            }
        });
        listCharacterB.setModel(new javax.swing.AbstractListModel() {

            @Override
            public int getSize() {
                return availableCharacters.size();
                //return story.getAvatarFactory().getAvailableCharacterNames().size();
            }

            @Override
            public Object getElementAt(int index) {
                return availableCharacters.toArray()[index];
                //return story.getAvatarFactory().getAvailableCharacterNames().get(index);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblActions = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listActions = new javax.swing.JList();
        lblCharacters = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listCharacterA = new javax.swing.JList();
        bttnApply = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listCharacterB = new javax.swing.JList();
        lblPreconditions = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listEmotionsPre = new javax.swing.JList();
        lblPostconditions = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        listEmotionsPos = new javax.swing.JList();
        lblTensionsPos = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        listTensionsPos = new javax.swing.JList();
        bttnAddAction = new javax.swing.JButton();
        lblEmotionsPos = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        listTensionsPre = new javax.swing.JList();
        lblTensionsPre = new javax.swing.JLabel();
        lblEmotionsPre = new javax.swing.JLabel();
        bttnRandomAction = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mexica Actions");
        setBackground(new java.awt.Color(225, 230, 240));
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblActions.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblActions.setLabelFor(lblActions);
        lblActions.setText("Select an action:");

        listActions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listActions.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listActionsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listActions);

        lblCharacters.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblCharacters.setText("Select characters for the action:");

        listCharacterA.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(listCharacterA);

        bttnApply.setText("Apply Characters");
        bttnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnApplyActionPerformed(evt);
            }
        });

        listCharacterB.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(listCharacterB);

        lblPreconditions.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPreconditions.setText("Preconditions");

        listEmotionsPre.setBackground(java.awt.SystemColor.control);
        listEmotionsPre.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listEmotionsPre.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        listEmotionsPre.setSelectionBackground(java.awt.SystemColor.control);
        listEmotionsPre.setSelectionForeground(java.awt.SystemColor.infoText);
        jScrollPane4.setViewportView(listEmotionsPre);

        lblPostconditions.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPostconditions.setText("Postconditions");

        listEmotionsPos.setBackground(java.awt.SystemColor.control);
        listEmotionsPos.setSelectionBackground(java.awt.SystemColor.control);
        listEmotionsPos.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane5.setViewportView(listEmotionsPos);

        lblTensionsPos.setText("Tensions:");

        listTensionsPos.setBackground(java.awt.SystemColor.control);
        listTensionsPos.setSelectionBackground(java.awt.SystemColor.control);
        listTensionsPos.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane6.setViewportView(listTensionsPos);

        bttnAddAction.setText("Add Action");
        bttnAddAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAddActionActionPerformed(evt);
            }
        });

        lblEmotionsPos.setText("Emotions:");

        listTensionsPre.setBackground(java.awt.SystemColor.control);
        listTensionsPre.setSelectionBackground(java.awt.SystemColor.control);
        listTensionsPre.setSelectionForeground(java.awt.SystemColor.infoText);
        jScrollPane7.setViewportView(listTensionsPre);

        lblTensionsPre.setText("Tensions:");

        lblEmotionsPre.setText("Emotions:");

        bttnRandomAction.setText("Random Action");
        bttnRandomAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnRandomActionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bttnRandomAction))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTensionsPos)
                            .addComponent(lblEmotionsPos)
                            .addComponent(lblPostconditions)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(bttnApply))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblTensionsPre, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblEmotionsPre, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblPreconditions, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addComponent(lblActions))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                    .addComponent(bttnAddAction)
                    .addComponent(lblCharacters, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCharacters)
                    .addComponent(lblActions))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblPreconditions)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                                .addComponent(lblEmotionsPre)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTensionsPre)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPostconditions)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblEmotionsPos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTensionsPos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bttnAddAction)
                    .addComponent(bttnApply)
                    .addComponent(bttnRandomAction))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bttnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnApplyActionPerformed
        CharacterName char1, char2;
        final ActionInstantiated instance;
        
        try {
            Action action = (Action)listActions.getSelectedValue();
            char1 = (CharacterName)listCharacterA.getSelectedValue();

            if (listCharacterB.getSelectedIndex() >= 0) {
                char2 = (CharacterName)listCharacterB.getSelectedValue();
                instance = new ActionInstantiated(action, char1, char2);
            }
            else {
                instance = new ActionInstantiated(action, char1);
            }

            listEmotionsPre.setModel(new javax.swing.AbstractListModel() {
                @Override
                public int getSize() {
                    return instance.getPreconditions(ConditionType.Emotion).size();
                }

                @Override
                public Object getElementAt(int index) {
                    ConditionInstantiated pre = instance.getPreconditions().get(index);
                    return (pre != null) ? pre.toString() : "N/A";
                }
            });
            listTensionsPre.setModel(new javax.swing.AbstractListModel() {
                @Override
                public int getSize() {
                    return instance.getPreconditions(ConditionType.Tension).size();
                }

                @Override
                public Object getElementAt(int index) {
                    ConditionInstantiated pre = instance.getPreconditions().get(index);
                    return (pre != null) ? pre.toString() : "N/A";
                }
            });
            listEmotionsPos.setModel(new javax.swing.AbstractListModel() {
                @Override
                public int getSize() {
                    return instance.getPosconditions().size();
                }

                @Override
                public Object getElementAt(int index) {
                    ConditionInstantiated pos = instance.getPosconditions().get(index);
                    return (pos != null) ? pos.toString() : "N/A";
                }
            });
            listTensionsPos.setModel(new javax.swing.AbstractListModel() {
                @Override
                public int getSize() {
                    return instance.getTensions().size();
                }

                @Override
                public Object getElementAt(int index) {
                    ConditionInstantiated tension = instance.getTensions().get(index);
                    return (tension != null) ? tension.toString() : "N/A";
                }
            });
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Select a character first", "Character selection", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bttnApplyActionPerformed

    private void listActionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listActionsValueChanged
        final Action action = (Action)listActions.getSelectedValue();
        
        if (action != null) {
            if (action.getNoCharacters() > 1)
                listCharacterB.setEnabled(true);
            else
                listCharacterB.setEnabled(false);

            listEmotionsPre.setModel(new javax.swing.AbstractListModel() {
                @Override
                public int getSize() {
                    return action.getPreconditions(ConditionType.Emotion).size();
                }

                @Override
                public Object getElementAt(int index) {
                    Precondition pre = action.getPreconditions().get(index);
                    return (pre != null) ? pre.toString() : "N/A";
                }
            });
            listTensionsPre.setModel(new javax.swing.AbstractListModel() {
                @Override
                public int getSize() {
                    return action.getPreconditions(ConditionType.Tension).size();
                }

                @Override
                public Object getElementAt(int index) {
                    Precondition pre = action.getPreconditions().get(index);
                    return (pre != null) ? pre.toString() : "N/A";
                }
            });
            listEmotionsPos.setModel(new javax.swing.AbstractListModel() {
                @Override
                public int getSize() {
                    return action.getPosconditions().size();
                }

                @Override
                public Object getElementAt(int index) {
                    Poscondition pos = action.getPosconditions().get(index);
                    return (pos != null) ? pos.toString() : "N/A";
                }
            });
            listTensionsPos.setModel(new javax.swing.AbstractListModel() {
                @Override
                public int getSize() {
                    return action.getTensions().size();
                }

                @Override
                public Object getElementAt(int index) {
                    Tension tension = action.getTensions().get(index);
                    return (tension != null) ? tension.toString() : "N/A";
                }
            });
        }
    }//GEN-LAST:event_listActionsValueChanged

    private void bttnAddActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAddActionActionPerformed
        CharacterName char1, char2;
        
        try {
            Action action = (Action)listActions.getSelectedValue();
            char1 = (CharacterName)listCharacterA.getSelectedValue();

            if (listCharacterB.getSelectedIndex() >= 0) {
                char2 = (CharacterName)listCharacterB.getSelectedValue();
                if (previousAction != null)
                    story.addAction(previousAction, action, char1, char2);
                else 
                    story.addAction(action, char1, char2);
            }
            else if (action.getNoCharacters() == 1) {
                if (previousAction != null)
                    story.addAction(previousAction, action, char1);
                else 
                    story.addAction(action, char1);
            }
            else {
                throw new InvalidCharacterException("Please select enough characters for the action");
            }
            this.setVisible(false);
        } catch (InvalidCharacterException icle) {
            JOptionPane.showMessageDialog(this, "Please select characters on the same location", 
                    "Invalid Character Selection", JOptionPane.ERROR_MESSAGE);
        } catch (DeadAvatarException dae) {
            JOptionPane.showMessageDialog(this, dae.getMessage(), 
                    "Dead Character Selection", JOptionPane.ERROR_MESSAGE);
        } catch (StoryFlowException sfe) {
            JOptionPane.showMessageDialog(this, sfe.getMessage(), 
                    "Story not flowing", JOptionPane.ERROR_MESSAGE);
        } catch (ArrayIndexOutOfBoundsException aie) {
            JOptionPane.showMessageDialog(this, "Please select an action and enough characters to perform it", 
                    "Insuficient Elements", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "General Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_bttnAddActionActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        listActions.requestFocusInWindow();
    }//GEN-LAST:event_formWindowOpened

    private void bttnRandomActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnRandomActionActionPerformed
        Action act = MexicaRepository.getInstance().getTextParser().generateRandomAction(3, list);
        listActions.setSelectedValue(act, true);
        List<CharacterName> availableCharacters = story.getAvatarFactory().getAvailableCharacterNames();
        listCharacterA.setSelectedValue(availableCharacters.get(random.nextInt(availableCharacters.size())), true);
        if (act.getNoCharacters() == 2)
            listCharacterB.setSelectedValue(availableCharacters.get(random.nextInt(availableCharacters.size())), true);
        bttnAddAction.requestFocusInWindow();
    }//GEN-LAST:event_bttnRandomActionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            java.awt.EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    MexicaActionInstantiator dialog = new MexicaActionInstantiator(new javax.swing.JFrame(), true, new Story());
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
                }
            });
        } catch (Exception ex) {
            System.err.println(ex);
        }
    }
    
    public final void setPreviousAction(ActionInstantiated previousAction) {
        this.previousAction = previousAction;
    }
    
    public final void setMissingCondition(ConditionInstantiated missingCondition) {
        this.missingCondition = missingCondition;
        if (missingCondition != null) {
            listCharacterA.setSelectedValue(missingCondition.getCharacterA(), true);
            if (missingCondition.getCharacterB() != null)
                listCharacterB.setSelectedValue(missingCondition.getCharacterB(), true);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bttnAddAction;
    private javax.swing.JButton bttnApply;
    private javax.swing.JButton bttnRandomAction;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblActions;
    private javax.swing.JLabel lblCharacters;
    private javax.swing.JLabel lblEmotionsPos;
    private javax.swing.JLabel lblEmotionsPre;
    private javax.swing.JLabel lblPostconditions;
    private javax.swing.JLabel lblPreconditions;
    private javax.swing.JLabel lblTensionsPos;
    private javax.swing.JLabel lblTensionsPre;
    private javax.swing.JList listActions;
    private javax.swing.JList listCharacterA;
    private javax.swing.JList listCharacterB;
    private javax.swing.JList listEmotionsPos;
    private javax.swing.JList listEmotionsPre;
    private javax.swing.JList listTensionsPos;
    private javax.swing.JList listTensionsPre;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        loadActionModel();
        this.validate();
    }
}