package mexica.gui;

import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.AbstractListModel;
import javax.swing.JOptionPane;
import mexica.CharacterName;
import mexica.MexicaRepository;
import mexica.context.*;
import mexica.core.*;
import mexica.engagement.*;
import mexica.story.*;
import subgraph.Solution;

/**
 * Class to apply an engagement action to the story
 * @author Ivan Guerrero
 */
public class MexicaEngagementStage extends javax.swing.JDialog {
    private AtomsStore atomStore;
    private List<ConditionInstantiated> context;
    private Action selectedAction;
    private Avatar contextAvatar;
    private Story story;
    
    /**
     * Creates new form MexicaEngagementStage
     */
    public MexicaEngagementStage(java.awt.Frame parent, boolean modal, Story story) {
        super(parent, modal);
        this.story = story;
        initComponents();
        getContentPane().setBackground(this.getBackground());
    }
    
    /**
     * Initializes the required data obtaining all the similar atoms to the given context
     * @param context The avatar's context 
     * @param avatar The selected avatar
     */
    public void initData(List<ConditionInstantiated> context, Avatar avatar) {
        contextAvatar = avatar;
        this.context = context;
        atomStore = MexicaRepository.getInstance().getAtoms();
        loadCellsAndContext();
    }
    
    private void loadCellsAndContext() {
        final List<Cell> list = new ArrayList<>();
        for (Cell cell : atomStore.getCells()) {
            if (cell.getAtoms(context).size() > 0)
                list.add(cell);
        }
        
        listCells.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listCells.setModel(new AbstractListModel() {
            @Override
            public int getSize() {
                return list.size();
            }
            @Override
            public Object getElementAt(int index) {
                return list.get(index);
            }
        });

        listCells.setSelectedIndex(0);
        lblCharacterContext.setText(contextAvatar + "'s Context");
        contextPanel.setLayout(new GridLayout(1,1));
        contextPanel.add(ContextBuilder.getVisualizationElement(context));
        contextPanel.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCells = new javax.swing.JLabel();
        lblAtoms = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listCells = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        listAtoms = new javax.swing.JList();
        lblSimilarity = new javax.swing.JLabel();
        lblAtomContext = new javax.swing.JLabel();
        lblCharacterContext = new javax.swing.JLabel();
        atomPanel = new javax.swing.JPanel();
        contextPanel = new javax.swing.JPanel();
        lblNextActions = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listNextActions = new javax.swing.JList();
        bttnRandomPick = new javax.swing.JButton();
        bttnAddAction = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Engagement Stage");

        lblCells.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblCells.setText("Cells");

        lblAtoms.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblAtoms.setText("Atoms");

        listCells.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listCellsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listCells);

        listAtoms.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listAtomsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listAtoms);

        lblSimilarity.setText("(Similarity %)");

        lblAtomContext.setText("Atom's context");

        lblCharacterContext.setText("Character's context:");

        atomPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout atomPanelLayout = new javax.swing.GroupLayout(atomPanel);
        atomPanel.setLayout(atomPanelLayout);
        atomPanelLayout.setHorizontalGroup(
            atomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        atomPanelLayout.setVerticalGroup(
            atomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        contextPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout contextPanelLayout = new javax.swing.GroupLayout(contextPanel);
        contextPanel.setLayout(contextPanelLayout);
        contextPanelLayout.setHorizontalGroup(
            contextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        contextPanelLayout.setVerticalGroup(
            contextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        lblNextActions.setText("Next actions available for the atom");

        jScrollPane3.setViewportView(listNextActions);

        bttnRandomPick.setText("Random Pick");
        bttnRandomPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnRandomPickActionPerformed(evt);
            }
        });

        bttnAddAction.setText("Add action");
        bttnAddAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAddActionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCells)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblAtoms)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSimilarity))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNextActions, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(atomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAtomContext, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(bttnRandomPick, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bttnAddAction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCharacterContext)
                            .addComponent(contextPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCells)
                    .addComponent(lblAtoms)
                    .addComponent(lblSimilarity)
                    .addComponent(lblAtomContext)
                    .addComponent(lblCharacterContext))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(atomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(contextPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblNextActions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bttnRandomPick)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bttnAddAction)
                        .addGap(0, 111, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bttnRandomPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnRandomPickActionPerformed
        int index;
        index = (int)(listAtoms.getModel().getSize() * Math.random());
        listAtoms.setSelectedIndex(index);
        listAtomsValueChanged(null);
        index = (int)(listCells.getModel().getSize() * Math.random());
        listCells.setSelectedIndex(index);
        listCellsValueChanged(null);
        index = (int)(listNextActions.getModel().getSize() * Math.random());
        listNextActions.setSelectedIndex(index);
    }//GEN-LAST:event_bttnRandomPickActionPerformed

    private void bttnAddActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAddActionActionPerformed
        try {
            NextAction nextAction = (NextAction)listNextActions.getSelectedValue();
            List<CharacterName> names = new ArrayList<>();
            boolean cancelOperation = false;
            List<String> actionChars = nextAction.getCharacters();

            for (int i=0; i<actionChars.size(); i++) {
                Object selection = JOptionPane.showInputDialog(this, 
                        "Select the character  " + actionChars.get(i).toUpperCase() + 
                        ": ", "Select character", JOptionPane.QUESTION_MESSAGE, null, 
                        story.getAvatarFactory().getAvailableCharacterNames().toArray(), null);
                if (selection instanceof CharacterName)
                    names.add((CharacterName)selection);
                else {
                    cancelOperation = true;
                    break;
                }
            }

            if (!cancelOperation) {
                Action action = (Action)nextAction;
                CharacterName[] characters = names.toArray(new CharacterName[0]);
                List<Action> list = MexicaRepository.getInstance().getActions().getActionList();
                if (list.contains(action)) {
                    int index = list.indexOf(action);
                    action = list.get(index);
                    story.addAction(action, characters);
                    this.setVisible(false);
                } else if (action.getActionName().equalsIgnoreCase("realised")) {
                    List<ActionInstantiated> actions = story.getActions();
                    //Obtains the fact that will be known by the characters
                    Object actionSelected = JOptionPane.showInputDialog(this, 
                            "Select an action", "Select an action", JOptionPane.QUESTION_MESSAGE, null, 
                            actions.toArray(), null);
                    ActionInstantiated selection = 
                            ActionInstantiated.createActionInstantiated((ActionInstantiated)actionSelected);
                    CompositeAction newAction = new CompositeAction(((NextAction)action).getAction(), selection, story.getAvatarFactory());
                    //Adds the characters of the selected action to the character's list
                    story.addAction(newAction, characters);
                    this.setVisible(false);
                } else {
                    JOptionPane.showMessageDialog(this, "The action is not implemented, please select another", 
                    "Invalid Action Selection", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch (DeadAvatarException dae) {
            JOptionPane.showMessageDialog(this, dae.getMessage(), 
                    "Invalid Character Selection", JOptionPane.ERROR_MESSAGE);
        }  catch (NullPointerException npe) {
            JOptionPane.showMessageDialog(this, "Please select an action to add", 
                    "Select an action first", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e, "Error during the execution", JOptionPane.ERROR_MESSAGE);
            System.err.println(e);
        }
    }//GEN-LAST:event_bttnAddActionActionPerformed

    private void listCellsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listCellsValueChanged
        Cell cell = (Cell)listCells.getSelectedValue();
        if (cell != null) {
            final Map<Atom, Solution> list = cell.getAtoms(context);

            listAtoms.setModel(new AbstractListModel() {

                @Override
                public int getSize() {
                    return list.size();
                }

                @Override
                public Object getElementAt(int index) {
                    return list.keySet().toArray()[index];
                }
            });
            listAtoms.setSelectedIndex(0);
        }
    }//GEN-LAST:event_listCellsValueChanged

    private void listAtomsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listAtomsValueChanged
        final Atom atom = (Atom)listAtoms.getSelectedValue();
        
        if (atom != null) {
            //Update the atom's context
            atomPanel.removeAll();
            atomPanel.setLayout(new GridLayout(1,1));
            atomPanel.add(ContextBuilder.getVisualizationElement(atom));
            atomPanel.revalidate();
            listNextActions.setModel(new AbstractListModel() {
                @Override
                public int getSize() {
                    List<Action> next = atom.getNextActions();
                    int size = 0;
                    if (next != null)
                        size = next.size();
                    return size;
                }

                @Override
                public Object getElementAt(int index) {
                    Action act = atom.getNextActions().get(index);
                    NextAction next = new NextAction(act);
                    return next;
                }
            });
        }
    }//GEN-LAST:event_listAtomsValueChanged

    public Action getSelectedAction() {
        return selectedAction;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel atomPanel;
    private javax.swing.JButton bttnAddAction;
    private javax.swing.JButton bttnRandomPick;
    private javax.swing.JPanel contextPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAtomContext;
    private javax.swing.JLabel lblAtoms;
    private javax.swing.JLabel lblCells;
    private javax.swing.JLabel lblCharacterContext;
    private javax.swing.JLabel lblNextActions;
    private javax.swing.JLabel lblSimilarity;
    private javax.swing.JList listAtoms;
    private javax.swing.JList listCells;
    private javax.swing.JList listNextActions;
    // End of variables declaration//GEN-END:variables
}