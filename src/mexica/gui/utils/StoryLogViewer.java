package mexica.gui.utils;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import mexica.reflection.TensionGraph;
import mexica.social.SocialStatus;
import mexica.story.ActionInstantiated;
import mexica.story.SocialData;
import mexica.story.Story;
import mexica.story.log.StoryLog;
import org.jfree.chart.ChartPanel;

/**
 * Dialog to display the log messages for a story
 * @author Ivan Guerrero
 */
public class StoryLogViewer extends javax.swing.JDialog {
    private Story story;
    private static Pattern pFileIndex = Pattern.compile("story(\\d+)?\\.log");
    /**
     * Creates new form StoryLogViewer
     */
    public StoryLogViewer(java.awt.Frame parent, boolean modal) {
        this(parent, modal, null);
    }
    
    public StoryLogViewer(java.awt.Frame parent, boolean modal, Story story) {
        super(parent, modal);
        initComponents();
        this.story = story;
        List<String> log = StoryLog.getLog(story);
        if (log != null) {
            for (String msg : log) {
                txtStoryLog.append(msg + "\n");
            }
            txtStoryLog.append("\n\n");
        }
        
        DefaultListModel model = (DefaultListModel)lbStory.getModel();
        for (ActionInstantiated action : story.getActions()) {
            model.addElement(action);
            if (action.getSocialStatus().equals(SocialStatus.multipleResults)) {
                SocialData socialData = action.getSocialData();
                txtStoryLog.append(action + ": " + socialData.getContexts()+ "/" + socialData.getJustifiedContexts() + "\n");
            }
        }
        ChartPanel chart = TensionGraph.getChart(story);
        panelTensions.add(chart);
        validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStoryLog = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtStoryLog = new javax.swing.JTextArea();
        lblStory = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lbStory = new JList(new DefaultListModel());
        bttnSave = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        panelTensions = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Story log");

        lblStoryLog.setText("Story log:");

        txtStoryLog.setColumns(20);
        txtStoryLog.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        txtStoryLog.setRows(5);
        txtStoryLog.setWrapStyleWord(true);
        txtStoryLog.setMaximumSize(new java.awt.Dimension(184, 69));
        txtStoryLog.setMinimumSize(new java.awt.Dimension(184, 69));
        jScrollPane1.setViewportView(txtStoryLog);

        lblStory.setText("Story:");

        lbStory.setMaximumSize(new java.awt.Dimension(200, 300));
        lbStory.setMinimumSize(new java.awt.Dimension(200, 300));
        lbStory.setPreferredSize(new java.awt.Dimension(200, 300));
        jScrollPane2.setViewportView(lbStory);

        bttnSave.setText("Save");
        bttnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnSaveActionPerformed(evt);
            }
        });

        jLabel1.setText("Tension graph:");

        panelTensions.setMaximumSize(new java.awt.Dimension(268, 300));
        panelTensions.setMinimumSize(new java.awt.Dimension(268, 300));
        panelTensions.setPreferredSize(new java.awt.Dimension(268, 300));
        panelTensions.setLayout(new java.awt.GridLayout(1, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bttnSave)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblStoryLog)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStory)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelTensions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStoryLog)
                    .addComponent(lblStory)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addComponent(panelTensions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bttnSave)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bttnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnSaveActionPerformed
        JFileChooser chooser = new JFileChooser(".");
        chooser.setFileFilter(new FileNameExtensionFilter("Log files", "log"));
        int index = obtainFileIndexFromDirectory(new File("."));
        chooser.setSelectedFile(new File("story" + ((index > 0) ? index : "") + ".log"));
        int confirm = JOptionPane.YES_OPTION;
        
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            try {
                File file = chooser.getSelectedFile();
                if (file.exists()) {
                    confirm = JOptionPane.showConfirmDialog(this, "Do you want to replace the existing file?", "Save file", JOptionPane.YES_NO_CANCEL_OPTION);
                }
                
                if (confirm == JOptionPane.YES_OPTION) {
                    StoryLog.saveToFile(story, file);
                    JOptionPane.showMessageDialog(this, "The file has been saved", "File saved", 
                                                         JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error while saving file", ex.getMessage(), JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_bttnSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StoryLogViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StoryLogViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StoryLogViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StoryLogViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                StoryLogViewer dialog = new StoryLogViewer(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bttnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lbStory;
    private javax.swing.JLabel lblStory;
    private javax.swing.JLabel lblStoryLog;
    private javax.swing.JPanel panelTensions;
    private javax.swing.JTextArea txtStoryLog;
    // End of variables declaration//GEN-END:variables

    private int obtainFileIndexFromDirectory(File file) {
        String[] list = {};
        int index;
        list = file.list(new FilenameFilter() {
                @Override
                public boolean accept(File file, String string) {
                    return string.startsWith("story") && string.endsWith("log");
                }
            });
        index = list.length;
        
        for (String filename : list) {
            Matcher matcher = pFileIndex.matcher(filename);
            try {
                if (matcher.matches() && Integer.parseInt(matcher.group(1)) > index)
                    index = Integer.parseInt(matcher.group(1));
            } catch(Exception ex) {}
        }
        
        return (index+1);
    }
}
